{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "McAfee Network Security Platform AWS Solution Deployment for TestDrive",
  "Metadata": {
	"Comment" : "Author: Vivek Stalin (vivek_stalin@mcafee.com). Copyright (c) 2017 McAfee Inc. - All Rights Reserved",  
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Network Configurations"
          },
          "Parameters": [
      			"VPCCIDR",
      			"PublicSubnetCIDR",
      			"PrivateSubnetCIDR",
      			"ProtectedSubnetCIDR"
          ]
        },	
        {
          "Label": {
            "default": "McAfee NSP Controller Settings"
          },
          "Parameters": [
              "ControllerCloudAccessKey",
              "ControllerCloudSecretKey"
      		  ]
        },
		{
    		"Label": {
                "default": "McAfee NSP Sensor Settings"
              },
              "Parameters": [
          		  "ClusterName",
				  "ClusterSecret"
          		  ]
        },
    		
		{
    		"Label": {
                "default": "Instance SSH Settings"
              },
              "Parameters": [
          		  "KeyName"
          		  ]
        }
      ],
      "ParameterLabels": { 
  		  "VPCCIDR": {
            "default": "Service VPC"
          },
  		  "PublicSubnetCIDR": {
            "default": "Service Management Subnet"
          },
  		  "PrivateSubnetCIDR": {
            "default": "Service Data Subnet"
          },
  		  "ProtectedSubnetCIDR": {
            "default": "Protected Subnet"
          },
        "ControllerCloudAccessKey": {
            "default": "Cloud Access Key"
          },
        "ControllerCloudSecretKey": {
            "default": "Cloud Secret Key"
          },
		  "ClusterName": {
            "default": "ClusterName"
          },
		  "ClusterSecret": {
            "default": "Cluster Secret Key"
          },
		  "KeyName":{
		   "default": "Key Name"
		 }
        }
	 }
  },	
  "Parameters": {
   
	  "VPCCIDR": {
      "Description": "IPv4 CIDR for VPC. Default:10.30.0.0/16",
      "Type": "String",
      "Default": "10.30.0.0/16",
      "AllowedPattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be IPv4 CIDR notation: X.X.X.X/X"
    },
	  "PublicSubnetCIDR": {
      "Description": "IPv4 CIDR for Management Subnet. Default:10.30.10.0/24",
      "Type": "String",
      "Default": "10.30.10.0/24",
      "AllowedPattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be IPv4 CIDR notation: X.X.X.X/X"
    },
	  "PrivateSubnetCIDR": {
      "Description": "IPv4 CIDR for Data Subnet. Default:10.30.20.0/24",
      "Type": "String",
      "Default": "10.30.20.0/24",
      "AllowedPattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be IPv4 CIDR notation: X.X.X.X/X"
    },
	  "ProtectedSubnetCIDR": {
      "Description": "IPv4 CIDR for Protected Subnet. Default:10.30.30.0/24",
      "Type": "String",
      "Default": "10.30.30.0/24",
      "AllowedPattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be IPv4 CIDR notation: X.X.X.X/X"
    },
    "ControllerCloudAccessKey": {
      "Description": "Your AWS Access Key",
      "Type": "String",
      "MinLength": "10",
	  "NoEcho" : "true"  
    },
    "ControllerCloudSecretKey": {
      "Description": "Your AWS Secret Key",
      "Type": "String",
      "MinLength": "10",
      "NoEcho" : "true"
    },
	"ClusterName": {
      "Description": "Name of the Cluster to be configured in the manager",
      "Type": "String",
      "MinLength": "3",
	  "MaxLength" : "30"
    },
	"ClusterSecret": {
      "Description": "Secret key for Manager-Sensor trust (Min 8 chars and Max 25 chars)",
      "Type": "String",
      "MinLength": "8",
	  "MaxLength" : "25",
	  "NoEcho" : "true"
    },
	"KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the Test VM Instances.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    }
  },

  "Mappings" : {
    "TemplateMap" : {  
     "us-west-2": {
        "NSMAMI": "ami-845dc6e4",
		"ControllerAMI" : "ami-6e0f860e",
        "SensorAMI": "ami-49b8dc29",
		"ServerAMI" : "ami-e01d8280"
        },
	"ap-southeast-2": {
        "NSMAMI": "ami-86e9e2e5",
		"ControllerAMI" : "ami-b91719da",
        "SensorAMI": "ami-c64652a5",
		"ServerAMI" : "ami-22c1f141"
        },
	"us-east-1": {
        "NSMAMI": "ami-8f096099",
        "ControllerAMI" : "ami-b79bdca1",
        "SensorAMI": "ami-a08fc8b6",
		"ServerAMI" : "ami-79f66d6f"
        }	
    }
  },
  "Resources" : {

    "DemoVPC" : {
       "Type" : "AWS::EC2::VPC",
	     "Properties": {
  	     "CidrBlock" : { "Ref" : "VPCCIDR"},
  		   "Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{"Ref" : "AWS::StackName"},"VPC"]]}}],
  		   "EnableDnsSupport": "true",
          "EnableDnsHostnames": "true"
		   }
      },
	   
	  "DemoPublicSubnet": {
       "Type": "AWS::EC2::Subnet",
	   "DependsOn": "DemoVPC",
       "Properties" : {
         "CidrBlock" : {"Ref":"PublicSubnetCIDR"},
		 "AvailabilityZone" : {"Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]},
		 "Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{"Ref" : "AWS::StackName"},"PublicSubnet"]]}}],
          "VpcId": {
              "Ref": "DemoVPC"
           }
        }
      },
		
    "DemoPrivateSubnet": {
       "Type": "AWS::EC2::Subnet",
	   "DependsOn": "DemoVPC",
       "Properties" : {
         "CidrBlock" : {"Ref":"PrivateSubnetCIDR"},
		 "AvailabilityZone" : {"Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]},
		 "Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{"Ref" : "AWS::StackName"},"PrivateSubnet"]]}}],
          "VpcId": {
              "Ref": "DemoVPC"
            }
        }
      },
		
	  "DemoProtectedSubnet": {
       "Type": "AWS::EC2::Subnet",
	   "DependsOn": "DemoVPC",
       "Properties" : {
         "CidrBlock" : {"Ref":"ProtectedSubnetCIDR"},
		 "AvailabilityZone" : {"Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]},
		  "Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"ProtectedSubnet"]]}} ],
         "VpcId": {
          "Ref": "DemoVPC"
            },
		      "MapPublicIpOnLaunch": "True"
        }
      },
	   
	  "DemoInternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
      "Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"IntGW"]]}} ]
      }
      },

    "DemoAttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "DemoVPC" },
         "InternetGatewayId" : { "Ref" : "DemoInternetGateway" }		
       }
      },
	
    "DemoPublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "DemoVPC"},
          "Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"PublicRouteTable"]]}} ]
       }
      },

  	"DemoPublicRoute" : {
        "Type" : "AWS::EC2::Route",
        "DependsOn" : "DemoAttachGateway",
        "Properties" : {
          "RouteTableId" : { "Ref" : "DemoPublicRouteTable" },
          "DestinationCidrBlock" : "0.0.0.0/0",
          "GatewayId" : { "Ref" : "DemoInternetGateway" }
        }
      },
	
  	"DemoPublicSubnetRouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "DemoPublicSubnet"
          },
          "RouteTableId": {
            "Ref": "DemoPublicRouteTable"
          }
        }
      },
	
  	"DemoPrivateSubnetRouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "DemoPrivateSubnet"
          },
          "RouteTableId": {
            "Ref": "DemoPublicRouteTable"
          }
        }
      },
	
  	"DemoProtectedSubnetRouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "DemoProtectedSubnet"
          },
          "RouteTableId": {
            "Ref": "DemoPublicRouteTable"
          }
        }
      },

	"DemoSecurityGroupManager" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "McAfee NSP AWS Solution- NSP Manager Security Group",
    	"Tags" : [ {"Key" : "Name", "Value" :"McAfeevNSPTestDriveManager"} ],
        "VpcId" : 
        	  {"Ref" : "DemoVPC"
        	  },
		"SecurityGroupIngress" : [
                {
      			"IpProtocol" : "tcp",
      			"FromPort" : "3389",
      			"ToPort" : "3389",
                  "CidrIp" : "0.0.0.0/0"
      			},
      			{
      			"IpProtocol" : "tcp",
      			"FromPort" : "443",
      			"ToPort" : "443",
                "CidrIp" : "0.0.0.0/0"
      			}
				]
	  }
	},
      


    "DemoSecurityGroupController" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "McAfee NSP AWS Solution- NSP Controller Security Group",
    	"Tags" : [ {"Key" : "Name", "Value" :"McAfeevNSPTestDriveController"} ],
        "VpcId" : 
        	  {"Ref" : "DemoVPC"
        	  }
        }
      },
	
	
	"DemoSecurityGroupTestVMGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "McAfee NSP AWS Solution- Test VM Group Security Group",
    	"Tags" : [ {"Key" : "Name", "Value" :"McAfeevNSPTestDriveTestVM"} ],
        "VpcId" : 
        	  {"Ref" : "DemoVPC"
        	  }
        }
      },
	  
	  
	 "DemoSecurityGroupSensorMgmt" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "McAfee NSP AWS Solution- NSP Sensor Management Suubnet Security Group",
    	"Tags" : [ {"Key" : "Name", "Value" :"McAfeevNSPTestDriveSensorMgmt"} ],
        "VpcId" : 
        	  {"Ref" : "DemoVPC"
        	  }
        }
      },

	  
    "DemoSecurityGroupSensorData" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "McAfee NSP AWS Solution- NSP Sensor Data Sunbent Security Group",
    	"Tags" : [ {"Key" : "Name", "Value" :"McAfeevNSPTestDriveSensorData"} ],
        "VpcId" : 
        	  {"Ref" : "DemoVPC"
        	  }
        }
      },
    
	
	"ManagerSGroup1Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "8510",
             "FromPort" : "8504",
             "GroupId": {"Ref": "DemoSecurityGroupManager"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupSensorMgmt" }
			 }
         },
		 
		 
    "ManagerSGroup2Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "22",
             "FromPort" : "22",
             "GroupId": {"Ref": "DemoSecurityGroupManager"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupController" }
			 }
         },	
		 
    "ManagerSGroup3Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "443",
             "FromPort" : "443",
             "GroupId": {"Ref": "DemoSecurityGroupManager"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupController" }
			 }
         },			 
	
	"ControllerSGroup1Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "22",
             "FromPort" : "22",
             "GroupId": {"Ref": "DemoSecurityGroupController"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupManager" }
			 }
         },
	
	"ControllerSGroup2Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "443",
             "FromPort" : "443",
             "GroupId": {"Ref": "DemoSecurityGroupController"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupTestVMGroup" }
			 }
         },
		 
	"ControllerSGroup3Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "443",
             "FromPort" : "443",
             "GroupId": {"Ref": "DemoSecurityGroupController"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupSensorMgmt" }
			 }
         },
		 
	"ControllerSGroup4Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "443",
             "FromPort" : "443",
             "GroupId": {"Ref": "DemoSecurityGroupController"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupManager" }
			 }
         },
		 
    "SensorMgmtSGroup1Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "22",
             "FromPort" : "22",
             "GroupId": {"Ref": "DemoSecurityGroupSensorMgmt"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupManager" }
			 }
         },
		 
    "SensorMgmtSGroup2Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "8510",
             "FromPort" : "8504",
             "GroupId": {"Ref": "DemoSecurityGroupSensorMgmt"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupManager" }
			 }
         },

    "SensorMgmtSGroup3Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "udp",
             "ToPort" : "8500",
             "FromPort" : "8500",
             "GroupId": {"Ref": "DemoSecurityGroupSensorMgmt"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupManager" }
			 }
         },

	"SensorMgmtSGroup4Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "443",
             "FromPort" : "443",
             "GroupId": {"Ref": "DemoSecurityGroupSensorMgmt"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupController" }
			 }
         },
		 
	 "SensorMgmtSGroup5Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "22",
             "FromPort" : "22",
             "GroupId": {"Ref": "DemoSecurityGroupSensorMgmt"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupTestVMGroup" }
			 }
         },
		 	 

	"SensorDataSGroup1Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "9797",
             "FromPort" : "9797",
             "GroupId": {"Ref": "DemoSecurityGroupSensorData"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupTestVMGroup" }
			 }
         },
		 
	"TestVMSGroup1Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "80",
             "FromPort" : "80",
             "GroupId": {"Ref": "DemoSecurityGroupTestVMGroup"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupManager" }
			 }
         },	 
	
	"TestVMSGroup2Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "443",
             "FromPort" : "443",
             "GroupId": {"Ref": "DemoSecurityGroupTestVMGroup"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupManager" }
			 }
         },	 
		 
    "TestVMSGroup3Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "22",
             "FromPort" : "22",
             "GroupId": {"Ref": "DemoSecurityGroupTestVMGroup"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupManager" }
			 }
         },	 
	
	"TestVMSGroup4Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "9797",
             "FromPort" : "9797",
             "GroupId": {"Ref": "DemoSecurityGroupTestVMGroup"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupSensorData" }
			 }
         },
		 
	"TestVMSGroup5Ingress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
             "IpProtocol" : "tcp",
             "ToPort" : "3306",
             "FromPort" : "3306",
             "GroupId": {"Ref": "DemoSecurityGroupTestVMGroup"},
			 "SourceSecurityGroupId":{ "Ref": "DemoSecurityGroupTestVMGroup" }
			 }
         },
	
	"DemoNSMInstance" : { 
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "C:/Users/Administrator/Desktop/DemoFiles/demodata.txt" : {
                "content" : { "Fn::Join" : ["", [
                  "API_ISM_PASSWD=", "admin123", "\n",
                  "CONTROLLER_NAME=",{"Ref" : "AWS::StackName"},"Controller", "\n",
                  "CONTROLLER_SECRET=","test@1234", "\n",
                  "CONTROLLER_SUBNET=","19.19.1.0/24", "\n",
                  "CONTROLLER_CLOUD_REGION=", { "Ref" : "AWS::Region" }, "\n",
                  "CONTROLLER_CLOUD_ACCESSKEY=", {"Ref":"ControllerCloudAccessKey"}, "\n",
                  "CONTROLLER_CLOUD_SECRET=", {"Ref":"ControllerCloudSecretKey"}, "\n",
                  "CLUSTER_NAME=", {"Ref":"ClusterName"}, "\n",
                  "CLUSTER_SECRET=",{"Ref":"ClusterSecret"}, "\n",
                  "STACK_NAME=", { "Ref" : "AWS::StackName" }, "\n",
                  "RESOURCE=", "DemoNSMInstance", "\n",
                  "REGION=", { "Ref" : "AWS::Region" }, "\n",
                  "CONTROLLER_WAIT_HANDLE=", { "Fn::Base64" : { "Ref" : "ControllerCreationWaitHandle" }}, "\n",
                  "CLUSTER_WAIT_HANDLE=", { "Fn::Base64" : { "Ref" : "ClusterCreationWaitHandle" }}, "\n",
                  "PROTECTED_VPC=", {"Ref":"DemoVPC"}, "\n",
                  "PROTECTED_SUBNET=", {"Ref":"DemoProtectedSubnet"}, "\n"
                  ]]}
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "TemplateMap", { "Ref" : "AWS::Region" }, "NSMAMI" ]},
        "Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"Manager"]]}} ],
    		"InstanceType" : "m4.xlarge",
    		"EbsOptimized" : "true",
    		"NetworkInterfaces": [ {
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
    		    "GroupSet": [{ "Ref" : "DemoSecurityGroupManager" }],
            "SubnetId": { "Ref" : "DemoPublicSubnet" }
            } ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "<script>\n",

          "cfn-init.exe -s ", { "Ref" : "AWS::StackName" },
          " -r DemoNSMInstance",
          " --region ", { "Ref" : "AWS::Region" }, "\n",
          "python C:\\Users\\Administrator\\Desktop\\DemoFiles\\createCluster.pyc", "\n",

          "</script>"
          ]]}}
       }
    },


   "ControllerCreationWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

   "ControllerCreationWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "DemoNSMInstance",
      "Properties" : {
        "Handle" : {"Ref" : "ControllerCreationWaitHandle"},
        "Timeout" : "1800"
      }
    },
	   

   "DemoControllerInstance" : {
      "Type" : "AWS::EC2::Instance",
	  "DependsOn" : "ControllerCreationWaitCondition",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "TemplateMap", { "Ref" : "AWS::Region" }, "ControllerAMI" ]},
        "Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"Controller"]]}} ],
    		"InstanceType" : "c3.xlarge",
    		"EbsOptimized" : "true",
    		"NetworkInterfaces": [ {
            "AssociatePublicIpAddress": "false",
            "DeviceIndex": "0",
  		    "GroupSet": [{ "Ref" : "DemoSecurityGroupController" }],
            "SubnetId": { "Ref" : "DemoPublicSubnet" }}],
    		"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
    		"{",
    		"\"NSM Primary IP\"",":","\"",{ "Fn::GetAtt": ["DemoNSMInstance", "PrivateIp"]},"\"",","," ",
    		"\"NSM Secondary IP\"",":","\" \"",","," ",
    		"\"Controller Name\"",":","\"",{"Ref" : "AWS::StackName"},"Controller","\"",","," ",
    		"\"Controller EIP\"",":","\"","\"",","," ",
    		"\"Controller Shared Key\"",":","\"","test@1234","\"",
    		"}"
    		]]}}
       }
    },
	   

   "ClusterCreationWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

   "ClusterCreationWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "DemoNSMInstance",
      "Properties" : {
        "Handle" : {"Ref" : "ClusterCreationWaitHandle"},
        "Timeout" : "1800"
      }
    },

	"DemoWebServerInstance" : {	
      "Type" : "AWS::EC2::Instance",
	  "DependsOn" : "ClusterCreationWaitCondition",
	    "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
			"/home/ubuntu/Sensor_userdata.txt" : {
                "content" : { "Fn::Join" : ["", [
				 "{",
    		     "\"","NSM Data","\"",":","[",
    		     "\n",
    		     "{","\"","NSM IP","\"",":","\"",{ "Fn::GetAtt": ["DemoNSMInstance", "PrivateIp"]},"\"",",",
    		     "\n",
    		     "\"","Cluster Name","\"",":","\"",{"Ref":"ClusterName"},"\"","}",
    		     "\n",
    		     "]}"
                  ]]}
              },
			  "/home/ubuntu/Sensor_intf.txt" : {
                "content" : { "Fn::Join" : ["", [
				 "[\n",
				 "{\n",
				 "\"DeviceIndex\": 0,\n",
				 "\"SubnetId\":","\"",{"Ref" : "DemoPublicSubnet"},"\",","\n",
				 "\"Groups\": [\"",{"Ref" : "DemoSecurityGroupSensorMgmt"},"\"]","\n" ,
				 "},","\n",
				 "{\n",
				 "\"DeviceIndex\": 1,\n",
				 "\"SubnetId\":","\"",{"Ref" : "DemoPrivateSubnet"},"\",","\n",
				 "\"Groups\": [\"",{"Ref" : "DemoSecurityGroupSensorData"},"\"]","\n" ,
				 "}","\n",
				 "]"
                  ]]}
              },
			"/home/ubuntu/sensor_script.sh" : {
                "content" : { "Fn::Join" : ["", [
				 "#!/bin/sh\n",
				 "sudo echo \"Executing Sensor Script to configure cluster secret key and take AMI2\"\n",
				 "sudo su -\n",
				 "cd /home/ubuntu\n",
				 "sudo touch temp.sh\n",
				 "sudo chmod 777 /home/ubuntu/*\n",
				 "cd /home/ubuntu\n",
				 "sudo chmod 400 ",{"Ref" : "AWS::StackName"},"SensorAMI1KP.pem","\n",
				 "sensor_instance_ID=$(sudo -u ubuntu cat sensor_1_launch.tmp | grep \"InstanceId\" | awk -F \":\" '{print $2}'| sed 's/\"//g' | sed 's/,//g' | sed 's/ //g')\n",
				 "sudo echo \"Sensor 1 instance ID is: $sensor_instance_ID\"\n",
				 "cd /home/ubuntu\n",
				 "NSM_octet=$(sudo echo \"", { "Fn::GetAtt": ["DemoNSMInstance", "PrivateIp"]},"\" | cut -d . -f 1,2,3)\n",
				 "sensor_ip=$(sudo -u ubuntu cat sensor_1_launch.tmp | grep \"\\\"PrivateIpAddress\\\":\" | grep $NSM_octet | sed -n 1p | awk -F \":\" '{print $2}'| sed 's/\"//g' | sed 's/,//g' | sed  's/ //g')\n",
				 "sudo echo \"Sensor 1 instance IP is: $sensor_ip\"\n",
				 "sudo echo -e '#!/usr/bin/expect\\nset timeout 60\\nspawn ssh -i \"",{"Ref" : "AWS::StackName"},"SensorAMI1KP.pem",
				      "\" admin@'$sensor_ip'\\nexpect {\\n\"password:\" {\\nsend \"admin123\\\\r\"\\nexp_continue\\n}\\n\"(yes/no)?\" {\\nsend \"yes\\\\r\"\\nexp_continue\\n}\\n}\\nexpect \":\"\\nsend \"",
					     {"Ref":"ClusterSecret"},"\\\\r\"\\nexpect \":\"\\nsend \"",{"Ref":"ClusterSecret"},"\\\\r\"\\nexpect \">\"\\nsend \"exit\\\\r\"\\ninteract' > ./temp.sh\n",
				 "sudo cat temp.sh\n",
				 "./temp.sh\n",
				 "sudo echo \"done executing sensor script\"\n"			 
                  ]]}
              },  
			"/home/ubuntu/WS_config.txt" : {
                "content" : { "Fn::Join" : ["", [
				 "<?php\n",
				 "define('DB_NAME', 'wordpress');\n",
				 "define('DB_USER', 'wordpress');\n",
				 "define('DB_PASSWORD', 'root@123$');\n",
				 "define('DB_HOST', 'localhost');\n",
				 "define('WP_CONTENT_DIR', '/usr/share/wordpress/wp-content');\n",
				 "?>"
                  ]]}
              },
			"/home/ubuntu/DB_userdata.txt" : {
             "content" : { "Fn::Join" : ["", [
			 "#!/bin/sh\n",
			 "sudo echo \"Downloading and installing dependency packages for installing NSPVirtualProbe\"\n",
			 "curl  http://169.254.169.254/latest/user-data/\n",
			 "sudo apt-get update && sudo apt-get upgrade -y\n",	
			 "sudo apt-get -y install python-setuptools\n",		
			 "sudo apt-get -y install expect\n",	 
             "sudo easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
			 "sudo su - ubuntu\n",
			 "cd /home/ubuntu\n",
			 "sudo chmod 777 /home/ubuntu/*\n",
			 "inst_Public_ip=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)\n",
			 "inst_Private_ip=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",	
			 "sudo su -\n",			 
			 "export DEBIAN_FRONTEND=\"noninteractive\"\n",
			 "sudo echo \"mysql-server mysql-server/root_password password root@123$\" | debconf-set-selections\n",
			 "sudo echo \"mysql-server mysql-server/root_password_again password root@123$\"| debconf-set-selections\n",
			 "sudo apt-get install mysql-server -y\n",
			 "sudo mysql -uroot -proot@123$ -e \"CREATE DATABASE wordpress\"\n",
			 "sudo mysql -uroot -proot@123$ -e \"GRANT ALL PRIVILEGES ON *.* TO 'wordpress'@'","localhost","' IDENTIFIED BY 'root@123$'; FLUSH PRIVILEGES;\"\n",
			 "sudo /etc/init.d/mysql stop\n",
		     "sudo sed -i '/127.0.0.1/s/^/#/' /etc/mysql/my.cnf\n",
			 "sudo /etc/init.d/mysql start\n",
             "sudo /etc/init.d/mysql status\n",
			 "sudo sleep 10\n",
			 "sudo wget"," ","\"","https://",{ "Fn::GetAtt": ["DemoNSMInstance", "PrivateIp"]},"/sdkapi/cloud/cluster/downloadprobeagent?name=",{"Ref":"ClusterName"},"&ostype=linux","\""," --no-check-certificate "," -O "," ","DemoNSPVirtualProbe.tar.gz","\n",
    		 "sudo tar xzf DemoNSPVirtualProbe.tar.gz","\n",
    		 "sudo ./install-zlink.sh\n",
    		 "sleep 30\n",		 
    		 "for i in $(seq 7)\n",
             "do\n",
             "  zasa_status=$(sudo /etc/init.d/zasad status)\n",
             "  echo \"checking iteartion:$i\"\n",
    		 "  echo \"zasa status ---> $zasa_status\"\n",
             "  if [ $i -eq 7 ]\n",
             "  then\n",
             "    echo \"Tried for 3mins. Maximum tries reached. Sending Failure signal from DB instance to CFN and exiting\"\n",
    		 "    cfn-signal -e 1 -r \"Zasad not up in DBServer\" ","\"",{ "Ref" : "DemoWebServerWaitHandle" },"\"","\n",
             "    break\n",
             "  fi\n",
             "  if echo $zasa_status | grep \"Service is running\"\n",
             "  then\n",
             "    echo \"zasa service is up and running, sending success signal to CFN and exiting\"\n",
    		 "    cfn-signal -e 0 -r \"Zasad up in DBServer\" ","\"",{ "Ref" : "DemoWebServerWaitHandle" },"\"","\n",
             "    break\n",
             "  else\n",
             "    echo \"zasa service is not started yet in DB instance.cannot send success signal to CFN\"\n",
             "    echo \"Time:$i: Sleeping for 30s for service to come up\"\n",
             "    sleep 30\n",
             "  fi\n",
             "done\n",
			 "sudo rm $0\n"
                  ]]}
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "TemplateMap", { "Ref" : "AWS::Region" }, "ServerAMI" ]},
        "Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"WebServer"]]}} ],
		"InstanceType" : "m4.large",
		"NetworkInterfaces": [{
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
  		  "GroupSet": [{ "Ref" : "DemoSecurityGroupTestVMGroup" }],
          "SubnetId": { "Ref" : "DemoProtectedSubnet" }
          } ],
		  "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
    	     "#!/bin/sh\n",
			 "sudo echo \"Downloading and installing dependency packages for installing NSPVirtualProbe\"\n",
			 "curl  http://169.254.169.254/latest/user-data/\n",
			 "sudo apt-get update && sudo apt-get upgrade -y\n",	
			 "sudo apt-get -y install python-setuptools\n",	
			 "sudo apt-get -y install expect\n",				 
             "sudo easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
			 "sudo cfn-init -s ", { "Ref" : "AWS::StackName" }," -r DemoWebServerInstance"," --region ",{ "Ref" : "AWS::Region" },"\n",
			 "sudo su - ubuntu\n",
			 "cd /home/ubuntu\n",
		     "sudo chmod 777 /home/ubuntu/*\n",
			 "sudo apt install wordpress -y\n",
			 "sudo service apache2 reload\n",
			 "inst_Public_ip=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)\n",
			 "inst_Private_ip=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
			 "sudo cat /home/ubuntu/WS_config.txt > /etc/wordpress/config-localhost.php\n",			 	
			 "sudo cat /home/ubuntu/WS_config.txt > /etc/wordpress/config-","$inst_Public_ip",".php\n",
			 "sudo cat /home/ubuntu/WS_config.txt > /etc/wordpress/config-","$inst_Private_ip",".php\n",
			 "sudo sed -i s'/localhost/'\"$inst_Private_ip\"'/g' /home/ubuntu/DB_userdata.txt\n",
			 "sudo echo -e \"Alias /blog /usr/share/wordpress\\n<Directory /usr/share/wordpress>\\n\\tOptions FollowSymLinks\\n\\tAllowOverride Limit Options FileInfo\\n\\tDirectoryIndex index.php\\n\\tOrder allow,deny\\n\\tAllow from all\\n</Directory>\\n<Directory /usr/share/wordpress/wp-content>\\n\\tOptions FollowSymLinks\\n\\tOrder allow,deny\\n\\tAllow from all\\n</Directory>\" > /etc/apache2/sites-available/wordpress.conf\n",
			 "sudo a2ensite wordpress\n",
			 "sudo service apache2 reload\n",
			 "sudo apt-get install -y awscli\n",		   
			 "aws --version\n",
			 "cd /home/ubuntu\n",
			 "sudo rm -rf .aws\n",
			 "sudo mkdir .aws\n",
			 "sudo touch .aws/config\n",
			 "sudo chmod 777 .aws/config\n",
			 "sudo echo -e ","\"[default]\\naws_access_key_id=",{"Ref":"ControllerCloudAccessKey"},"\\naws_secret_access_key=",{"Ref":"ControllerCloudSecretKey"},"\\nregion=",{"Ref":"AWS::Region"},"\\noutput=json","\"", " > .aws/config\n",
			 "sudo cp -r .aws/ /root/\n",
			 "sudo echo \"Creating Key Pair for Sensor AMI1 instance...\"\n",
			 "sudo -u ubuntu aws ec2 create-key-pair --key-name ",{"Ref" : "AWS::StackName"},"SensorAMI1KP",
			     " --query 'KeyMaterial' --output text > ",{"Ref" : "AWS::StackName"},"SensorAMI1KP.pem","\n",
			 "sudo chmod 400 ",{"Ref" : "AWS::StackName"},"SensorAMI1KP.pem","\n",
			 "sudo echo \"Launching instance from Sensor AMI 1...\"\n",
			 "sudo -u ubuntu aws ec2 run-instances --image-id ",{ "Fn::FindInMap" : [ "TemplateMap", { "Ref" : "AWS::Region" }, "SensorAMI" ]},
			      " --count 1 "," --instance-type c4.xlarge",
				  " --placement AvailabilityZone=",{"Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]},
				  " --key-name ",{"Ref" : "AWS::StackName"},"SensorAMI1KP",
				  " --network-interfaces file:///home/ubuntu/Sensor_intf.txt "," > sensor_1_launch.tmp","\n",		  
			 "sudo sleep 10\n",
			 "sensor_1_instance_ID=$(sudo cat sensor_1_launch.tmp| grep \"InstanceId\" | awk -F \":\" '{print $2}'| sed 's/\"//g' | sed 's/,//g' | sed 's/ //g')\n",
			 "sudo -u ubuntu aws ec2 create-tags --resources ","$sensor_1_instance_ID"," --tags Key=Name,Value=",{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"SensorAMI1"]]},"\n",
			 "exp_val=\"running\"\n",
             "for i in $(seq 11)\n",
             "do\n",
			 "  Status=$(sudo -u ubuntu aws ec2 describe-instances --instance-ids $sensor_1_instance_ID | grep \"\\\"Name\\\":\" | awk -F \":\" '{print $2}' | sed  s'/\"//g' | sed s'/ //g' | sed s'/,//g')\n",
             "  echo \"current status of instance is: $Status\"\n",
			 "  if [ $i -eq 11 ]\n",
			 "  then\n",
			 "    echo \"Max time 5 mins reached instance status has still not come to running\"\n",
			 "    break\n",
			 "  fi\n",
			 "  if [ $Status = $exp_val ]\n",
			 "  then\n",
			 "    echo \"instance status is: running\"\n",
			 "    break\n",
			 "  else\n",
             "    echo \"instance status is still not come to running. Sleeping for 30 seconds\"\n",
             "    sleep 30\n",
             "  fi\n",
             "done\n",
			 "sleep 300\n",
			 "sudo echo \"Running sensor script...\"\n",
			 "sudo sh sensor_script.sh\n",
			 "sudo sleep 10\n",	 
			 "sudo echo \"sensor_1_instance is running now\"\n",
			 "sensor_2_ami=$(sudo -u ubuntu aws ec2 create-image --instance-id ","$sensor_1_instance_ID"," --name \"",{"Ref" : "AWS::StackName"},"SensorAMI2\" --description \"Sensor AMI2 with registered cluster shared secret\" | awk -F \":\" '{print $2}'| sed 's/\"//g'| sed 's/}//g' | sed  's/ //g')","\n",
			 "exp_val=\"available\"\n",
             "for i in $(seq 11)\n",
             "do\n",
			 "  Status=$(sudo -u ubuntu aws ec2 describe-images  --image-ids $sensor_2_ami | grep \"State\" | awk -F \":\" '{print $2}' | sed  s'/\"//g' | sed s'/ //g' | sed s'/,//g')\n",
             "  echo \"current status of image is: $Status\"\n",
			 "  if [ $i -eq 11 ]\n",
			 "  then\n",
			 "    echo \"Max time 5 mins reached image status has still not come to availble\"\n",
			 "    break\n",
			 "  fi\n",
			 "  if [ $Status = $exp_val ]\n",
			 "  then\n",
			 "    echo \"image status is: available\"\n",
			 "    break\n",
			 "  else\n",
             "    echo \"image status is still not available. Sleeping for 30 seconds\"\n",
             "    sleep 30\n",
             "  fi\n",
             "done\n",
			 "sudo echo \"sensor_2_ami is $sensor_2_ami and is available now\"\n",
			 "sudo echo \"Deleting Key Pair of Sensor AMI1 instance...\"\n",
			 "sudo -u ubuntu aws ec2 delete-key-pair --key-name ",{"Ref" : "AWS::StackName"},"SensorAMI1KP","\n",
			 "sudo echo \"Launching Sensor 2 instance from new sensor2 AMI...\"\n",
			 "sudo -u ubuntu aws ec2 run-instances"," --image-id ","$sensor_2_ami",
			      " --count 1 "," --instance-type c4.xlarge",
			      " --user-data file:///home/ubuntu/Sensor_userdata.txt",
				  " --placement AvailabilityZone=",{"Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]},
				  " --key-name ",{"Ref" : "KeyName"},
				  " --network-interfaces file:///home/ubuntu/Sensor_intf.txt "," > sensor_launch.tmp","\n",
			 "sudo sleep 10\n",
			 "sensor_instance_ID=$(sudo cat sensor_launch.tmp| grep \"InstanceId\" | awk -F \":\" '{print $2}'| sed 's/\"//g' | sed 's/,//g' | sed 's/ //g')\n",
			 "sudo -u ubuntu aws ec2 create-tags --resources ","$sensor_instance_ID"," --tags Key=Name,Value=",{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"Sensor"]]},"\n",
			 "sudo echo \"Job Done. Terminating Sensor Instance 1...\"\n",
			 "sudo -u ubuntu aws ec2 terminate-instances --instance-ids ","$sensor_1_instance_ID"," --region ",{ "Ref" : "AWS::Region" },"\n",
			 "sudo echo \"Launching MySQL DB Server instance...\"\n",
			 "sudo -u ubuntu aws ec2 run-instances"," --image-id ",{ "Fn::FindInMap" : [ "TemplateMap", { "Ref" : "AWS::Region" }, "ServerAMI" ]}," --count 1 ","--instance-type m4.large ",
			      "--key-name ",{"Ref":"KeyName"}," --user-data file:///home/ubuntu/DB_userdata.txt ",
	   			  "--associate-public-ip-address --subnet-id ",{"Ref":"DemoPrivateSubnet"}," --security-group-ids ",{"Ref":"DemoSecurityGroupTestVMGroup"},
				  " --placement AvailabilityZone=",{"Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]}," > db_launch.tmp\n",
			"DB_instance_ID=$(sudo cat db_launch.tmp| grep \"InstanceId\" | awk -F \":\" '{print $2}'| sed 's/\"//g' | sed 's/,//g' | sed 's/ //g')\n",
			"DB_private_IP=$( sudo cat db_launch.tmp | grep '\"PrivateIpAddress\":' | sed -n 1p | awk -F \":\" '{print $2}'| sed 's/\"//g' | sed 's/,//g' | sed  's/ //g')\n",
			"sudo -u ubuntu aws ec2 create-tags --resources ","$DB_instance_ID"," --tags Key=Name,Value=",{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"DBServer"]]},"\n",
			"sudo sed -i s'/localhost/'\"$DB_private_IP\"'/g' /etc/wordpress/config-","$inst_Public_ip",".php\n",
			"sudo sed -i s'/localhost/'\"$DB_private_IP\"'/g' /etc/wordpress/config-","$inst_Private_ip",".php\n",
			 "sudo wget"," ","\"","https://",{ "Fn::GetAtt": ["DemoNSMInstance", "PrivateIp"]},"/sdkapi/cloud/cluster/downloadprobeagent?name=",{"Ref":"ClusterName"},"&ostype=linux","\""," --no-check-certificate "," -O "," ","DemoNSPVirtualProbe.tar.gz","\n",
    		 "sudo tar xzf DemoNSPVirtualProbe.tar.gz","\n",
    		 "sudo ./install-zlink.sh\n",
    		 "sleep 30\n",		 
    		 "for i in $(seq 7)\n",
             "do\n",
             "  zasa_status=$(sudo /etc/init.d/zasad status)\n",
             "  echo \"checking iteartion:$i\"\n",
    		 "  echo \"zasa status ---> $zasa_status\"\n",
             "  if [ $i -eq 7 ]\n",
             "  then\n",
             "    echo \"Tried for 3mins. Maximum tries reached. Sending Failure signal to CFN and exiting\"\n",
    		 "    cfn-signal -e 1 -r \"Zasad not up in WebServer\" ","\"",{ "Ref" : "DemoWebServerWaitHandle" },"\"","\n",
             "    break\n",
             "  fi\n",
             "  if echo $zasa_status | grep \"Service is running\"\n",
             "  then\n",
             "    echo \"zasa service is up and running, sending success signal to CFN and exiting\"\n",
    		 "    cfn-signal -e 0 -r \"Zasad up in WebServer\" ","\"",{ "Ref" : "DemoWebServerWaitHandle" },"\"","\n",
             "    break\n",
             "  else\n",
             "    echo \"zasa service is not started yet.cannot send success signal to CFN\"\n",
             "    echo \"Time:$i: Sleeping for 30s for service to come up\"\n",
             "    sleep 30\n",
             "  fi\n",
             "done\n",
			 "sudo rm $0\n"
    		 ]]}},
    		
			 "KeyName": { "Ref": "KeyName" }
       }
    },
	
	"DemoWebServerWaitHandle" : {
        "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
	
	"DemoWebServerWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
	  "DependsOn" : "DemoWebServerInstance",
      "Properties" : {
         "Handle"  : { "Ref" : "DemoWebServerWaitHandle" },
          "Timeout" : "1800",
          "Count"   : "2"
	  }
   }
  }
 }